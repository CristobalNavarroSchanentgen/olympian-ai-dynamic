# Pre-commit hooks configuration
# Run: pre-commit install
# Manual run: pre-commit run --all-files

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.3.0
    hooks:
      - id: black
        language_version: python3
        files: ^backend/

  # Python import sorting
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black"]
        files: ^backend/

  # Python linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.3.5
    hooks:
      - id: ruff
        args: ["--fix"]
        files: ^backend/

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.9.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        files: ^backend/
        args: ["--ignore-missing-imports"]

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.8
    hooks:
      - id: bandit
        args: ["-ll", "-r"]
        files: ^backend/app/

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        types_or: [yaml, json]
        exclude: ^frontend/

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-docstring-first
        files: ^backend/.*\.py$
      - id: debug-statements
        files: ^backend/.*\.py$
      - id: mixed-line-ending
        args: ["--fix=lf"]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        args: ["--fix"]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ["--baseline", ".secrets.baseline"]

  # Docker linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: ["--ignore", "DL3008", "--ignore", "DL3009"]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck

  # Frontend hooks (TypeScript/React)
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.57.0
    hooks:
      - id: eslint
        files: ^frontend/.*\.[jt]sx?$
        types: [file]
        additional_dependencies:
          - eslint@8.57.0
          - eslint-config-prettier@9.1.0
          - eslint-plugin-react@7.34.0
          - eslint-plugin-react-hooks@4.6.0
          - "@typescript-eslint/eslint-plugin@7.3.1"
          - "@typescript-eslint/parser@7.3.1"

  # License headers
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.5
    hooks:
      - id: insert-license
        files: ^backend/app/.*\.py$
        args:
          - --license-filepath
          - scripts/license_header.txt
          - --comment-style
          - "#"
        exclude: __init__.py

# Local hooks
  - repo: local
    hooks:
      # Run tests on Python files
      - id: pytest-check
        name: pytest-check
        entry: bash -c 'cd backend && python -m pytest tests/ -x -v --tb=short'
        language: system
        pass_filenames: false
        files: ^backend/.*\.py$
        stages: [push]

      # Check for print statements
      - id: no-print-statements
        name: No print statements
        entry: bash -c 'grep -n "print(" $0 && exit 1 || exit 0'
        language: system
        files: ^backend/app/.*\.py$

      # Validate requirements.txt
      - id: requirements-txt-fixer
        name: Fix requirements.txt
        entry: bash -c 'cd backend && sort -u requirements.txt -o requirements.txt'
        language: system
        files: ^backend/requirements\.txt$
