name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
    
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test environment
      working-directory: ./backend
      run: |
        cp .env.example .env
        cp config.yaml.example config.yaml
        mkdir -p data logs
    
    - name: Run linting
      working-directory: ./backend
      run: |
        ruff check .
        black --check .
    
    - name: Run type checking
      working-directory: ./backend
      run: |
        mypy . || true  # Don't fail on type errors for now
    
    - name: Run tests with coverage
      working-directory: ./backend
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: Backend Coverage
        fail_ci_if_error: false
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: backend/htmlcov/
    
    - name: Check coverage threshold
      working-directory: ./backend
      run: |
        coverage report --fail-under=70
    
    - name: Generate test report
      if: always()
      working-directory: ./backend
      run: |
        pip install pytest-html
        pytest tests/ --html=report.html --self-contained-html || true
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-report-${{ matrix.python-version }}
        path: backend/report.html

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup Ollama
      run: |
        # Pull a small model for testing
        docker exec ${{ job.services.ollama.id }} ollama pull tinyllama
    
    - name: Run integration tests
      working-directory: ./backend
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
        OLLAMA_HOST: http://localhost:11434
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/ -v -m integration

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'backend'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Bandit security linter
      working-directory: ./backend
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: backend/bandit-report.json

  notify:
    runs-on: ubuntu-latest
    needs: [test, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ success() }}
      run: |
        echo "✅ All backend tests passed successfully!"
    
    - name: Notify on failure
      if: ${{ failure() }}
      run: |
        echo "❌ Backend tests failed. Please check the logs."
